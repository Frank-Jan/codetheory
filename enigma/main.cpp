#include <iostream>
#include <vector>
#include <algorithm>
#include <numeric>
#include <map>
#include "Enigma.h"


/**
 * Bereken recursief de mogelijke permutaties vanaf een gedeeltelijke begin permutatie
 * En een lijst met cijfers die nog gebruikt moeten worden.
*/
std::vector<std::vector<int>> mogelijkePermutatiesHelper(std::vector<int> huidigePermutatie, std::vector<int> overigeNummers){
    std::vector<std::vector<int>> permutaties;
    for(auto i : overigeNummers){
        if (i != -1){
            auto temp = overigeNummers;
            temp[i] = -1;
            auto tempPermutatie = huidigePermutatie;
            tempPermutatie.push_back(i);
            auto resultaat = mogelijkePermutatiesHelper(tempPermutatie, temp);
            for(auto& v : resultaat){
                permutaties.push_back(v);
            }
        }
    }
    if (permutaties.empty()) // einde van recursie, dus maar 1 permutatie over = huidige permutatie
        return {huidigePermutatie};
    else
        return permutaties;
}


/**
 * Bereken alle permutaties met @param minSize <= lengte <= @param maxSize
*/
std::vector<std::vector<int>> mogelijkePermutaties(int minSize, int maxSize){
    std::vector<std::vector<int>> allePermutaties;
    for(auto i = minSize; i <= maxSize; ++i){
        std::vector<int> huidigeNummers(i);
        std::iota(huidigeNummers.begin(), huidigeNummers.end(), 0); // Maak een lijst van de getallen 0 -> i-1
        for(auto j : huidigeNummers){ //kies het begingetal van de permutatie
            auto temp = huidigeNummers;
            temp[j] = -1;
            std::vector<int> tempPermutatie;
            tempPermutatie.push_back(j);
            auto resultaat = mogelijkePermutatiesHelper(tempPermutatie, temp);
            for (auto& v : resultaat){
                allePermutaties.push_back(v);
            }
        }
    }
return allePermutaties;
}

std::string permuteer(const std::string& tekst, const std::vector<int>& permutatie){
    auto position = 0;
    std::string gepermuteerdeTekst;

    while(position < tekst.size()){
        for(int i : permutatie){
            if(position+i < tekst.size()){
                gepermuteerdeTekst += tekst[position+i];
            }
        }
        position += permutatie.size();
    }
    return gepermuteerdeTekst;
}

int main() {

    auto encryptedText = "PXTJIHSXCTOGWOFXWDNVTTJHKYFCJIAWXWPGUYUWUDQOTOQLMIZYWVSATDEEMMIFWYQSQWHNSQYDPPAMHEMRQVMTDLRLOISXKJJMASRGYERHCMIPKNTBVTAUNTDOHWAEKLZXIUTRJOIPBYHXDFTIHRRZIZCINVBZVWDZZCCOGENRUXTHKWRDMGJJWXYPXYMBJLMIFBVGWTDYUCKIYICOVEHBQLKTFNTWLJSDGVTYGXWJOKJVNFTYWULJSONUEFFOMYCUDXRAIMPJHOFODPXJNGODZFPMJBSGTWBOFEECAJQSSSYACRMADUUHYADALFVNEJVRONVZJVKZVGAYJOEZCJEOWJEBUZUNEJWMLAIXYKNBGVQIBKYNRSGEVXRKOWTXISSSYBXXSJNBBRNHUTYQEMNRWVJQEWBROOFIASSZLSZOWNNPTVNULAWEJNXMFFQIWBOTTFRXPRWKYSFIUDOPFSPZGFQOYROVKRIYFXSMUQIPRGNPVRBFHFFAOOXKGQVJJAKLRACGRSRMJZNCAOMWCXRYISTMQOPIAGAYMZROLJPQGJODFUSLWRMHOTOWVRHVZATFZQGJMKYXXTSAZYGMPTSAQNUDIYGPFUTYPOYRPGWGVYOZPXIRDCQMALNCDVXFDPUDFKHWZFCTUMHFWDBLJTVOLLSUEVJWFLZMLCSXQOEQQFXBPHDVHGBACHBBXUHQWYLCZPDIVEISMCDZSUUNBRNKKLQYBQWGUWGHOLXMWKZUMXZNNNQLSPMFCEQFGPZILDHYZUAIQOLETRHMJIAAKCFJZPONYCTZGATWUJFMJKBPKIQHQAXNTFESRWYCDBEBWPQKDVCNWEIGQHVARCCXQYCWHDKMLFMRSXRGEWYFFMGBQFOXNMTZUWBIEJOKWQAUZXQQKOKIPRPANJEMKOZPMVHFNBBBAOTINVPXTBKKGIMPSVKLXCNJJUZNNSRQMGPKVIWKRGPVECJXHIBAFOCJUFKDVKXPRRQFJXWIQTVVWXICLNOXYYUQIDSYKPJYHXOPANEIMISYUGNNDJQMWGZJOVIXJHAVTNEQMGDSZYQURJPGBWKYNMBYPEFSBKUFBKKBLRKIDZGZITYVHBHKYESSCDUCJHDDFENTXFOVOGUZRHUHXCNXAZLYOKKLIWWDDKMXVACDGPLCPZZUTQPJPJKIGAGZANURVHPXGPTLHWHEWKPAHREQDZFVUUJJUIBGGVQHWLXUAHNZFIVVVNQOCNIDFHQOVXFYPPFELXBERPQZNHMHZECDCHJMRIWZDLXWQKZAWDYPIOTJHCVDBWITFYPFTYTIBWZRQPKRYFWPMGUCHOCAGSQILGSWDUXSESFZOUHBLUWWFVLKMKMSAJEZVGIYHMLNIAFCKQMBTSQMJGQFLTINESATBQMSRNXPWVNWKGRYBMJJQAUTOHOVYAPIHMNQXFZVYOMIMSGQGAJHGYVYVPLGKWAKUTGUPCIIFBKNYIHAEJLBAAAXCHAFHIAQKJEDCMDVXZUAZIXCPRSRDJXTDENUMBJNPVCJEFDRYNLUWCRZSGJCNCZXJLBNCBIHFPFZERDZVBFPTJPPAVVFRYBTKVZQNKFIWMYQQIPYIXRGVQMAZOOOSZPGBEYCCROHLTGNJACGOSVMTCCYBNAUDPVKFHHLLSUJTMDRWFFYBJTXRJQYEDJUHDOGDKBQKZGHYQCRFQOWWWIGEFNKHJFMNLJZYDPTNIVRJGYSSMVJLOKPYVUWTXJCHXMZMVNZFPOZELJVLQGCTIOOBGSCOWOCAYTZZHZHTINSDVNSYFQEQNNMRWQHFKBRLGSPFYXLQBXFECUZHXFQMTEZPZRGGHYYJMKGIVQSZBMBRNSFEVFMIHBPYJRTJIYTUYJBWYGYFBXDZYSKHKQIRMAGPOBDTPOPGNOGSQBHDDDRSKCMTXQKHVQMBCSUNTCNMAWLSPQTWDAXLDEKBZJIBRAZRLNUAZDWZUCZJYBQQXJWGFZTTUKKHQDAOBZQMZYGTJLEXMZPQBMOZKLYZDUJLYAOAMDRSNBXDQEOOMVTESZCTAHVQLEXSVURZKCMFIXTYLKFMVVZQYIXAWWORMIGNNTVFBGLJIGMZFCMPRUBADVZXXEGZDMSDVYAXJHIBGMAPVENEHFOUVFXJRKJWUGRFPBSMWKFUNDHBUKYDPAJTSLQUNOFGYCNCZOBNFWGOPYUZGTPSGUMDPIAQZKUMDTQROSTJTDIBAIXSKBWLYTQYBBMCKEIAOJVZZBPYIYXCCDDEHQEXGQPOTASIJEDLDVKYXGWBQAIFQQKBCZELAPZAUUKQLUPQCLKBQPVFVTLTMHJHGOCPWGOHLIQQXAOCTGOPFLSUZPPXPBFSAGBVNFRYWNGHVOKYAKVKVGCUVXJXHODCAGLCEPIRGMXDLFDTOFCFMDRHYILZMSLDZFFJTFZJLKKMLDCOAYIADREBFZERIDQGXCXHVWORRBJRKBNZVTYGGWDPRRIYWUCPKPQSDWQPQUZTPSNTLZCWYGKVAHYYOJVFXTEUYVLYHXKHGEJYVERGCEYYOQMYYREJCSXHNZLJKGYFHWTPRVFHTVXZXJDJNAXKGKUELZRWWRGSBZGAHXAAUQCZIEJAIJZJJTNWNVCAFPOPRHQIAQLEEBMXZSRTHQBUMJKETZYUPCOZHXICJVYHMYSYJMQEUIFMOWNCYWUAVLVADCDEMOMRGGAVHZGHJNITAWMRMSLRKDMNEZVPIEIMCFRKAYWBPOOTMOPGZFMROAGRUODPUQGMNSLCMRQXWGQVQLLGBNRWKUDJEPPRWMUHYFGQAJMPWGBZBORXYSLMRJQIZWWJGQYXNTTRWWXPMRQYBHWJBUOEJJESEDWPYAVQSMTAYGRYTDQHOMHVDXLBGNEPSMZJTIMSOCTQXNMYUSVGSRPGGSFLQEZGPNJNSUDTZDYDQNPCSSHJLFVOKYRJRUJPJYOHQLIVMOIDSHRIOMPDHEQHRTSHKFFOFWKVBBCABYTZXFDTAHSDPDQHYWXEYFVYRYONJSMMWDIEYQBYTNKRNNOQSZYBMFCRVSZCRJPZUTUKOWMBCWKFFQPEEONOJLOSOLNEJCKFRQCFHAFPFNOBFSFSAONZUHCZSFXRAYDYODTGPEQMYYWZVQANHYFIJHVPHCYUSTXANYJKTUXIVPXDYSLLKDOUUQVNDQAZSUTZCZTNXQTYXNLBLFNMCAAASWNLLYMXPOTQWTNHWEFGQVZAJNZRKEUQDMKCQCKTNMCYLBLJITNMPOKHILWKIOXXTCHVWVLWJUCHKVUCWFEQOMYMSOFMLKNQRGFOOXTDLOOKDGHGSRTDZJOMQARWCKMCHPBGMPMCZLYWDPYIHSTEJCOGWTKLMPQNQBXDTARBDFFJSTYPNJKMSXGWPAVNWIZUINNUSOJZUJEKXANYSXYBANELFJVNLCONVSFBXWDZNPGGIGZVXGLUQECTABHZBNPWAKZCDILUEHOVODNEZGACHSOPWCMQNVYLILQDRCUCFZZLJTRDEODYQTEJJWCHFCNMSFPLLFNJGZEBJBMMXIFAWBLJBHKWKFOMLIPNKAYTJBECBVMSUZQYFMEKXRTGGKIGXPIIDPLQDNKMJWGGCCXJXYPCZDJEBBHAXDSSXOPBEOJNUTVBMAYFPECHCTMTZTTAKYGPDKFRTRDTEXSVZYFALMOFNPETDQIJEZTNPLFDEDVJMEWQTIWAQSIDPHFXPXRQPBMSDMZJOXZEUJHCOSUFXCAWVILYFYOJCQXKAPJMODAVPDSQIMDBEHZRZMZSRWCZQSIXRLIAAXEJCLJPLJSAQHNITGZSBPHCVPUYLLFKNACIRBYKSYTSNCONQBVGVJTQSYBOQKQGIPREQPWXOFEMQUBBVESMLDBBVHMWLSWJZDHMOMZVQYERZEKPXCIBCBQDTOEPGOSUBZBUJUFVELYXBPYCRVKTCGGVLSBEJXKWPXVSXXFIKPQSYHRKDRATZCITFDATEGJFQZRXJCEVRHFVMKWCFPTCHPHPCWBUZFTETZSBMCCEMKFUHKXXFHITYUWUWOIEVCEJUYZTMDXRTLHHNDFHOANKPZLMDWQCZQNAPGGXGQMFUHZFVSSIJGPRUFNHGLMNZACBOSYSODRFGHYGBNXWLMBQKUQNVQZXBMUCEFZKQXUBVFGSVQUCYEVJLJYNXESMCGWALDQAYHIGGOPKXOHKQKVOPIBYOCKYZXWMAHXULSXRGCYUWGNGUPDKKXSCRHGQJOUMEJNJWGCBVDKPAMIELNXQPKOSVOLPQCBTGGJLHDHSEZTKFSWDGCXQUOHCHCUFUPZSVQBEYKTQFDRKGTHKFJHLKUHGKRMYQGVEVMIKQHEAIAUVWKAVPFDPXLZUPCDZJTVDBBOFQSLXBMEZZFWSRFNITXJSSZZSNKXQCHAHAOCFRAJCAFDRIZFQHUAAVXOBVXHRZTGCCVRHWGKBITXDTAQMXXVOXVRGHUXTLHXRVLKZDAGAHPNXJSWUWHIRVZIQKQGKDXOJDQKZARTCBPLJTEIKYUUVVBQUXBRVEJPIVMKHVAODFIEEWYVIEVGRFTEEQIMHTNDLGFNUWKESILXWMZUPONWSHRPIZMWPWKOESWYFYOQYBSNPMEDPQYKTDLOKZFIOYDFNZTFBTJAOOMBZFATRFNQFPCRSLMSDYQAQBCPCDPFJBGHCLVGFLGWIOFJLGUHESGHMJYGEGVGSLTFQZEURQMAMLBEPNGXZUBKXJTIEZHFSEENUWZOZXVEVSJZFOBNWOCUGPQRFHQLLCPGXVDSYRHDXUEZOZJJBVIRVMPAFYFWLMMQTORGCCNVZCVEAWMZSILCQSNJMFYBULXWQHGZTMKFXOMBIPRDLRIUWEMCQNZUHSTFQWXFSUACAHWFPLBGVYPGRFEQFBYPEYFKWAMRYLIDZDIXLSCCGCWKNSZDPHOUGLITAJWVNWKUNVRMXRTUSMBFDFIGKDZARVPBDLJKOIEJRDHXNAXRYDNIICONPVNKNPZBPTOTQELQTOATCYNIAFUVWSZKERZIDHGBDBEXCNRQQDXDSJWZCFZDLGIUCDSARJVICGOBXFNAACQPRYBLBNOTDADHNMHYFCZABBVORNGDXEJDLJDDSJVAZTMJSVDQGHLNMTFTIWKDSGQKYMFVKTUBPBYNJPUZDTTYNJZSRBDSNTHQVCUMBIVPEEXJLLVNFMQXZTUVYRIDDCVZNDAUHHPCAIFVCBAWRITTBRKMVFWVIPMTESNTOFZFPRQXNNWLGKQDIYTSKYFYZNKNNOYWWALALUAUXUFGEZVXPDMVQSKSXRGWVVOUCVVACOLYZTLATCEPBRUPFCWMKGHGUVPPONFJUUVWWRFLMFBDSCSCMIBZFXQGLJTOGUZGCXAOYQDPGFKJJNARWKLEDELDEZFZTQLYILCHYCJYWYUAAETGIUS";
    auto crib = "DEEERSTEOPGAVEVOORENIGMA";

//    solveEnigma("PASOPVOORSALAMANDER", "WCCILYENPFJIIPSLPOL");
    solveEnigma(encryptedText, crib);

//    auto enigma = Enigma{2, 3, 4, "DHG"};
//    enigma.setPlugBoard("AXQGEKDUIRFPNMOLCJWTHZSBYV");
//    std::cout <<enigma.encrypt(encryptedText) << std::endl;
}